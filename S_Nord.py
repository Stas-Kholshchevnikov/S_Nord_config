# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'S_Nord.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from constants import URI_ADRES
import requests
import json
import os
import time
import datetime
import openpyxl

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(861, 651)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(30, 90, 17, 17))
        self.checkBox.setText("")
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_2.setGeometry(QtCore.QRect(30, 120, 17, 17))
        self.checkBox_2.setText("")
        self.checkBox_2.setObjectName("checkBox_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setEnabled(False)
        self.lineEdit.setGeometry(QtCore.QRect(110, 90, 131, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setEnabled(False)
        self.lineEdit_2.setGeometry(QtCore.QRect(290, 90, 113, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(60, 90, 47, 13))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(250, 90, 47, 13))
        self.label_2.setObjectName("label_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(70, 30, 161, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(30, 30, 47, 13))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(250, 30, 47, 13))
        self.label_4.setObjectName("label_4")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(290, 30, 113, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setEnabled(False)
        self.lineEdit_5.setGeometry(QtCore.QRect(110, 120, 131, 20))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(60, 120, 47, 13))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(250, 120, 47, 13))
        self.label_6.setObjectName("label_6")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setEnabled(False)
        self.lineEdit_6.setGeometry(QtCore.QRect(290, 120, 113, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(20, 70, 401, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("background-color: rgb(214, 214, 214);")
        self.label_11.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(20, 10, 401, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("background-color: rgb(214, 214, 214);")
        self.label_12.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_12.setObjectName("label_12")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setEnabled(False)
        self.lineEdit_7.setGeometry(QtCore.QRect(110, 180, 131, 20))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.checkBox_3 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_3.setGeometry(QtCore.QRect(30, 210, 17, 17))
        self.checkBox_3.setText("")
        self.checkBox_3.setObjectName("checkBox_3")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(20, 160, 401, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("background-color: rgb(214, 214, 214);")
        self.label_13.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_13.setObjectName("label_13")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(250, 210, 47, 13))
        self.label_7.setObjectName("label_7")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_8.setEnabled(False)
        self.lineEdit_8.setGeometry(QtCore.QRect(110, 210, 131, 20))
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(60, 210, 47, 13))
        self.label_8.setObjectName("label_8")
        self.checkBox_4 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_4.setGeometry(QtCore.QRect(30, 180, 17, 17))
        self.checkBox_4.setText("")
        self.checkBox_4.setObjectName("checkBox_4")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(60, 180, 47, 13))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(250, 180, 47, 13))
        self.label_10.setObjectName("label_10")
        self.lineEdit_9 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_9.setEnabled(False)
        self.lineEdit_9.setGeometry(QtCore.QRect(290, 210, 113, 20))
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.lineEdit_10 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_10.setEnabled(False)
        self.lineEdit_10.setGeometry(QtCore.QRect(290, 180, 113, 20))
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.lineEdit_11 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_11.setEnabled(False)
        self.lineEdit_11.setGeometry(QtCore.QRect(110, 270, 131, 20))
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.checkBox_5 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_5.setGeometry(QtCore.QRect(30, 270, 17, 17))
        self.checkBox_5.setText("")
        self.checkBox_5.setObjectName("checkBox_5")
        self.lineEdit_12 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_12.setEnabled(False)
        self.lineEdit_12.setGeometry(QtCore.QRect(290, 270, 113, 20))
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(60, 270, 47, 13))
        self.label_14.setObjectName("label_14")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(20, 250, 401, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("background-color: rgb(214, 214, 214);")
        self.label_17.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(250, 270, 47, 13))
        self.label_18.setObjectName("label_18")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(60, 330, 47, 13))
        self.label_15.setObjectName("label_15")
        self.checkBox_6 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_6.setGeometry(QtCore.QRect(30, 330, 17, 17))
        self.checkBox_6.setText("")
        self.checkBox_6.setObjectName("checkBox_6")
        self.lineEdit_13 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_13.setEnabled(False)
        self.lineEdit_13.setGeometry(QtCore.QRect(110, 330, 131, 20))
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.lineEdit_14 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_14.setEnabled(False)
        self.lineEdit_14.setGeometry(QtCore.QRect(290, 330, 113, 20))
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(250, 330, 47, 13))
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(self.centralwidget)
        self.label_20.setGeometry(QtCore.QRect(20, 310, 401, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("background-color: rgb(214, 214, 214);")
        self.label_20.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_20.setObjectName("label_20")
        self.lineEdit_15 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_15.setEnabled(False)
        self.lineEdit_15.setGeometry(QtCore.QRect(90, 400, 113, 20))
        self.lineEdit_15.setInputMask("")
        self.lineEdit_15.setObjectName("lineEdit_15")
        self.lineEdit_16 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_16.setEnabled(False)
        self.lineEdit_16.setGeometry(QtCore.QRect(90, 430, 113, 20))
        self.lineEdit_16.setObjectName("lineEdit_16")
        self.lineEdit_17 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_17.setEnabled(False)
        self.lineEdit_17.setGeometry(QtCore.QRect(90, 460, 113, 20))
        self.lineEdit_17.setObjectName("lineEdit_17")
        self.lineEdit_18 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_18.setEnabled(False)
        self.lineEdit_18.setGeometry(QtCore.QRect(90, 490, 113, 20))
        self.lineEdit_18.setObjectName("lineEdit_18")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(30, 400, 47, 13))
        self.label_16.setObjectName("label_16")
        self.label_21 = QtWidgets.QLabel(self.centralwidget)
        self.label_21.setGeometry(QtCore.QRect(30, 430, 61, 16))
        self.label_21.setObjectName("label_21")
        self.label_22 = QtWidgets.QLabel(self.centralwidget)
        self.label_22.setGeometry(QtCore.QRect(30, 460, 71, 16))
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.centralwidget)
        self.label_23.setGeometry(QtCore.QRect(30, 490, 47, 13))
        self.label_23.setObjectName("label_23")
        self.label_24 = QtWidgets.QLabel(self.centralwidget)
        self.label_24.setGeometry(QtCore.QRect(30, 520, 47, 13))
        self.label_24.setObjectName("label_24")
        self.lineEdit_19 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_19.setEnabled(False)
        self.lineEdit_19.setGeometry(QtCore.QRect(90, 520, 113, 20))
        self.lineEdit_19.setObjectName("lineEdit_19")
        self.label_25 = QtWidgets.QLabel(self.centralwidget)
        self.label_25.setGeometry(QtCore.QRect(20, 370, 831, 181))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_25.setFont(font)
        self.label_25.setStyleSheet("background-color: rgb(214, 214, 214);")
        self.label_25.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_25.setObjectName("label_25")
        self.checkBox_7 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_7.setGeometry(QtCore.QRect(370, 370, 17, 17))
        self.checkBox_7.setText("")
        self.checkBox_7.setObjectName("checkBox_7")
        self.lineEdit_20 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_20.setEnabled(False)
        self.lineEdit_20.setGeometry(QtCore.QRect(300, 430, 113, 20))
        self.lineEdit_20.setObjectName("lineEdit_20")
        self.label_26 = QtWidgets.QLabel(self.centralwidget)
        self.label_26.setGeometry(QtCore.QRect(240, 520, 47, 13))
        self.label_26.setObjectName("label_26")
        self.lineEdit_21 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_21.setEnabled(False)
        self.lineEdit_21.setGeometry(QtCore.QRect(300, 400, 113, 20))
        self.lineEdit_21.setObjectName("lineEdit_21")
        self.lineEdit_22 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_22.setEnabled(False)
        self.lineEdit_22.setGeometry(QtCore.QRect(300, 460, 113, 20))
        self.lineEdit_22.setObjectName("lineEdit_22")
        self.lineEdit_23 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_23.setEnabled(False)
        self.lineEdit_23.setGeometry(QtCore.QRect(300, 490, 113, 20))
        self.lineEdit_23.setObjectName("lineEdit_23")
        self.label_28 = QtWidgets.QLabel(self.centralwidget)
        self.label_28.setGeometry(QtCore.QRect(240, 400, 47, 13))
        self.label_28.setObjectName("label_28")
        self.label_29 = QtWidgets.QLabel(self.centralwidget)
        self.label_29.setGeometry(QtCore.QRect(240, 430, 61, 16))
        self.label_29.setObjectName("label_29")
        self.label_30 = QtWidgets.QLabel(self.centralwidget)
        self.label_30.setGeometry(QtCore.QRect(240, 490, 47, 13))
        self.label_30.setObjectName("label_30")
        self.label_31 = QtWidgets.QLabel(self.centralwidget)
        self.label_31.setGeometry(QtCore.QRect(240, 460, 71, 16))
        self.label_31.setObjectName("label_31")
        self.lineEdit_24 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_24.setEnabled(False)
        self.lineEdit_24.setGeometry(QtCore.QRect(300, 520, 113, 20))
        self.lineEdit_24.setObjectName("lineEdit_24")
        self.lineEdit_25 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_25.setEnabled(False)
        self.lineEdit_25.setGeometry(QtCore.QRect(510, 430, 113, 20))
        self.lineEdit_25.setObjectName("lineEdit_25")
        self.label_32 = QtWidgets.QLabel(self.centralwidget)
        self.label_32.setGeometry(QtCore.QRect(450, 520, 47, 13))
        self.label_32.setObjectName("label_32")
        self.lineEdit_26 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_26.setEnabled(False)
        self.lineEdit_26.setGeometry(QtCore.QRect(510, 400, 113, 20))
        self.lineEdit_26.setObjectName("lineEdit_26")
        self.lineEdit_27 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_27.setEnabled(False)
        self.lineEdit_27.setGeometry(QtCore.QRect(510, 460, 113, 20))
        self.lineEdit_27.setObjectName("lineEdit_27")
        self.lineEdit_28 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_28.setEnabled(False)
        self.lineEdit_28.setGeometry(QtCore.QRect(510, 490, 113, 20))
        self.lineEdit_28.setObjectName("lineEdit_28")
        self.label_34 = QtWidgets.QLabel(self.centralwidget)
        self.label_34.setGeometry(QtCore.QRect(450, 400, 47, 13))
        self.label_34.setObjectName("label_34")
        self.label_35 = QtWidgets.QLabel(self.centralwidget)
        self.label_35.setGeometry(QtCore.QRect(450, 430, 61, 16))
        self.label_35.setObjectName("label_35")
        self.label_36 = QtWidgets.QLabel(self.centralwidget)
        self.label_36.setGeometry(QtCore.QRect(450, 490, 47, 13))
        self.label_36.setObjectName("label_36")
        self.label_37 = QtWidgets.QLabel(self.centralwidget)
        self.label_37.setGeometry(QtCore.QRect(450, 460, 71, 16))
        self.label_37.setObjectName("label_37")
        self.lineEdit_29 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_29.setEnabled(False)
        self.lineEdit_29.setGeometry(QtCore.QRect(510, 520, 113, 20))
        self.lineEdit_29.setObjectName("lineEdit_29")
        self.label_38 = QtWidgets.QLabel(self.centralwidget)
        self.label_38.setGeometry(QtCore.QRect(660, 430, 61, 16))
        self.label_38.setObjectName("label_38")
        self.label_39 = QtWidgets.QLabel(self.centralwidget)
        self.label_39.setGeometry(QtCore.QRect(660, 460, 71, 16))
        self.label_39.setObjectName("label_39")
        self.lineEdit_30 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_30.setEnabled(False)
        self.lineEdit_30.setGeometry(QtCore.QRect(720, 460, 113, 20))
        self.lineEdit_30.setObjectName("lineEdit_30")
        self.lineEdit_31 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_31.setEnabled(False)
        self.lineEdit_31.setGeometry(QtCore.QRect(720, 520, 113, 20))
        self.lineEdit_31.setObjectName("lineEdit_31")
        self.label_40 = QtWidgets.QLabel(self.centralwidget)
        self.label_40.setGeometry(QtCore.QRect(660, 400, 47, 13))
        self.label_40.setObjectName("label_40")
        self.lineEdit_32 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_32.setEnabled(False)
        self.lineEdit_32.setGeometry(QtCore.QRect(720, 430, 113, 20))
        self.lineEdit_32.setObjectName("lineEdit_32")
        self.lineEdit_33 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_33.setEnabled(False)
        self.lineEdit_33.setGeometry(QtCore.QRect(720, 490, 113, 20))
        self.lineEdit_33.setObjectName("lineEdit_33")
        self.label_41 = QtWidgets.QLabel(self.centralwidget)
        self.label_41.setGeometry(QtCore.QRect(660, 490, 47, 13))
        self.label_41.setObjectName("label_41")
        self.lineEdit_34 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_34.setEnabled(False)
        self.lineEdit_34.setGeometry(QtCore.QRect(720, 400, 113, 20))
        self.lineEdit_34.setObjectName("lineEdit_34")
        self.label_42 = QtWidgets.QLabel(self.centralwidget)
        self.label_42.setGeometry(QtCore.QRect(660, 520, 47, 13))
        self.label_42.setObjectName("label_42")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(440, 70, 221, 291))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(670, 190, 181, 171))
        self.textEdit_2.setObjectName("textEdit_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(565, 20, 161, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: rgb(255, 88, 47);")
        self.pushButton.setObjectName("pushButton")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setEnabled(False)
        self.progressBar.setGeometry(QtCore.QRect(20, 570, 831, 31))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.label_27 = QtWidgets.QLabel(self.centralwidget)
        self.label_27.setGeometry(QtCore.QRect(740, 20, 101, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_27.setFont(font)
        self.label_27.setStyleSheet("background-color: rgb(102, 181, 255);")
        self.label_27.setTextFormat(QtCore.Qt.AutoText)
        self.label_27.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_27.setObjectName("label_27")
        self.checkBox_8 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_8.setGeometry(QtCore.QRect(750, 28, 16, 17))
        self.checkBox_8.setText("")
        self.checkBox_8.setObjectName("checkBox_8")
        self.label_33 = QtWidgets.QLabel(self.centralwidget)
        self.label_33.setGeometry(QtCore.QRect(673, 70, 181, 111))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_33.setFont(font)
        self.label_33.setStyleSheet("background-color: rgb(238, 238, 238);\n"
"background-color: rgb(158, 252, 216);")
        self.label_33.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_33.setObjectName("label_33")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(683, 90, 161, 22))
        self.comboBox.setEditable(False)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(700, 120, 131, 41))
        self.pushButton_2.setStyleSheet("background-color: rgb(148, 253, 148);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(440, 20, 111, 31))
        self.pushButton_3.setStyleSheet("background-color: rgb(149, 255, 149);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_43 = QtWidgets.QLabel(self.centralwidget)
        self.label_43.setGeometry(QtCore.QRect(432, 10, 421, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_43.setFont(font)
        self.label_43.setStyleSheet("background-color: rgb(238, 238, 238);\n"
"background-color: rgb(158, 252, 216);")
        self.label_43.setText("")
        self.label_43.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_43.setObjectName("label_43")
        self.label_43.raise_()
        self.label_25.raise_()
        self.label_20.raise_()
        self.label_17.raise_()
        self.label_13.raise_()
        self.label_12.raise_()
        self.label_11.raise_()
        self.checkBox.raise_()
        self.checkBox_2.raise_()
        self.lineEdit.raise_()
        self.lineEdit_2.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.lineEdit_3.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.lineEdit_4.raise_()
        self.lineEdit_5.raise_()
        self.label_5.raise_()
        self.label_6.raise_()
        self.lineEdit_6.raise_()
        self.lineEdit_7.raise_()
        self.checkBox_3.raise_()
        self.label_7.raise_()
        self.lineEdit_8.raise_()
        self.label_8.raise_()
        self.checkBox_4.raise_()
        self.label_9.raise_()
        self.label_10.raise_()
        self.lineEdit_9.raise_()
        self.lineEdit_10.raise_()
        self.lineEdit_11.raise_()
        self.checkBox_5.raise_()
        self.lineEdit_12.raise_()
        self.label_14.raise_()
        self.label_18.raise_()
        self.label_15.raise_()
        self.checkBox_6.raise_()
        self.lineEdit_13.raise_()
        self.lineEdit_14.raise_()
        self.label_19.raise_()
        self.lineEdit_15.raise_()
        self.lineEdit_16.raise_()
        self.lineEdit_17.raise_()
        self.lineEdit_18.raise_()
        self.label_16.raise_()
        self.label_21.raise_()
        self.label_22.raise_()
        self.label_23.raise_()
        self.label_24.raise_()
        self.lineEdit_19.raise_()
        self.checkBox_7.raise_()
        self.lineEdit_20.raise_()
        self.label_26.raise_()
        self.lineEdit_21.raise_()
        self.lineEdit_22.raise_()
        self.lineEdit_23.raise_()
        self.label_28.raise_()
        self.label_29.raise_()
        self.label_30.raise_()
        self.label_31.raise_()
        self.lineEdit_24.raise_()
        self.lineEdit_25.raise_()
        self.label_32.raise_()
        self.lineEdit_26.raise_()
        self.lineEdit_27.raise_()
        self.lineEdit_28.raise_()
        self.label_34.raise_()
        self.label_35.raise_()
        self.label_36.raise_()
        self.label_37.raise_()
        self.lineEdit_29.raise_()
        self.label_38.raise_()
        self.label_39.raise_()
        self.lineEdit_30.raise_()
        self.lineEdit_31.raise_()
        self.label_40.raise_()
        self.lineEdit_32.raise_()
        self.lineEdit_33.raise_()
        self.label_41.raise_()
        self.lineEdit_34.raise_()
        self.label_42.raise_()
        self.textEdit.raise_()
        self.textEdit_2.raise_()
        self.pushButton.raise_()
        self.progressBar.raise_()
        self.label_27.raise_()
        self.checkBox_8.raise_()
        self.label_33.raise_()
        self.comboBox.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 861, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action = QtWidgets.QAction(MainWindow)
        self.action.setEnabled(False)
        self.action.setObjectName("action")
        self.action123 = QtWidgets.QAction(MainWindow)
        self.action123.setObjectName("action123")

        self.checkBox.clicked.connect(lambda: self.check_ch(self.checkBox, self.lineEdit, self.lineEdit_2))
        self.checkBox_2.clicked.connect(lambda: self.check_ch(self.checkBox_2, self.lineEdit_5, self.lineEdit_6))
        self.checkBox_3.clicked.connect(lambda: self.check_ch(self.checkBox_3, self.lineEdit_8, self.lineEdit_9))
        self.checkBox_4.clicked.connect(lambda: self.check_ch(self.checkBox_4, self.lineEdit_7, self.lineEdit_10))
        self.checkBox_5.clicked.connect(lambda: self.check_ch(self.checkBox_5, self.lineEdit_11, self.lineEdit_12))
        self.checkBox_6.clicked.connect(lambda: self.check_ch(self.checkBox_6, self.lineEdit_13, self.lineEdit_14))
        self.checkBox_7.clicked.connect(
            lambda: self.check_ch(self.checkBox_7, self.lineEdit_15, self.lineEdit_16, self.lineEdit_17,
                                  self.lineEdit_18, self.lineEdit_19, self.lineEdit_20, self.lineEdit_21,
                                  self.lineEdit_22, self.lineEdit_23, self.lineEdit_24, self.lineEdit_25,
                                  self.lineEdit_26, self.lineEdit_27, self.lineEdit_28, self.lineEdit_29,
                                  self.lineEdit_30, self.lineEdit_31, self.lineEdit_32, self.lineEdit_33,
                                  self.lineEdit_34))

        self.pushButton.clicked.connect(self.processing)
        self.pushButton_2.clicked.connect(self.full_report)
        self.pushButton_3.clicked.connect(self.read_config)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Настройка S-Nord"))
        self.label.setText(_translate("MainWindow", "Адрес 1"))
        self.label_2.setText(_translate("MainWindow", "Порт 1"))
        self.label_3.setText(_translate("MainWindow", "Логин"))
        self.label_4.setText(_translate("MainWindow", "Пароль"))
        self.label_5.setText(_translate("MainWindow", "Адрес 2"))
        self.label_6.setText(_translate("MainWindow", "Порт 2"))
        self.label_11.setText(_translate("MainWindow", "Настройки TCP/IP (GPRS ) Центра охраны "))
        self.label_12.setText(_translate("MainWindow", "Данные авторизации"))
        self.label_13.setText(_translate("MainWindow", "Настройки TCP/IP (Ethernet ) Центра охраны "))
        self.label_7.setText(_translate("MainWindow", "Порт 2"))
        self.label_8.setText(_translate("MainWindow", "Адрес 2"))
        self.label_9.setText(_translate("MainWindow", "Адрес 1"))
        self.label_10.setText(_translate("MainWindow", "Порт 1"))
        self.label_14.setText(_translate("MainWindow", "Адрес 1"))
        self.label_17.setText(_translate("MainWindow", "Настройки TCP/IP (GPRS ) Облака "))
        self.label_18.setText(_translate("MainWindow", "Порт 1"))
        self.label_15.setText(_translate("MainWindow", "Адрес 1"))
        self.label_19.setText(_translate("MainWindow", "Порт 1"))
        self.label_20.setText(_translate("MainWindow", "Настройки TCP/IP (Ethernet ) Облака "))
        self.lineEdit_15.setText(_translate("MainWindow", "MEGAFON"))
        self.lineEdit_16.setText(_translate("MainWindow", "25002"))
        self.lineEdit_17.setText(_translate("MainWindow", "ops-sber.megafon.ru"))
        self.lineEdit_18.setText(_translate("MainWindow", "internet"))
        self.label_16.setText(_translate("MainWindow", "Название"))
        self.label_21.setText(_translate("MainWindow", "PLMN"))
        self.label_22.setText(_translate("MainWindow", "АРМ"))
        self.label_23.setText(_translate("MainWindow", "Имя"))
        self.label_24.setText(_translate("MainWindow", "Пароль"))
        self.lineEdit_19.setText(_translate("MainWindow", "internet"))
        self.label_25.setText(_translate("MainWindow", "Настройки GSM"))
        self.lineEdit_20.setText(_translate("MainWindow", "25001"))
        self.label_26.setText(_translate("MainWindow", "Пароль"))
        self.lineEdit_21.setText(_translate("MainWindow", "MTS"))
        self.lineEdit_22.setText(_translate("MainWindow", "opssber.msk"))
        self.lineEdit_23.setText(_translate("MainWindow", "mts"))
        self.label_28.setText(_translate("MainWindow", "Название"))
        self.label_29.setText(_translate("MainWindow", "PLMN"))
        self.label_30.setText(_translate("MainWindow", "Имя"))
        self.label_31.setText(_translate("MainWindow", "АРМ"))
        self.lineEdit_24.setText(_translate("MainWindow", "mts"))
        self.lineEdit_25.setText(_translate("MainWindow", "25020"))
        self.label_32.setText(_translate("MainWindow", "Пароль"))
        self.lineEdit_26.setText(_translate("MainWindow", "Sber"))
        self.lineEdit_27.setText(_translate("MainWindow", "sec.ops.sberbank"))
        self.lineEdit_28.setText(_translate("MainWindow", "internet"))
        self.label_34.setText(_translate("MainWindow", "Название"))
        self.label_35.setText(_translate("MainWindow", "PLMN"))
        self.label_36.setText(_translate("MainWindow", "Имя"))
        self.label_37.setText(_translate("MainWindow", "АРМ"))
        self.lineEdit_29.setText(_translate("MainWindow", "internet"))
        self.label_38.setText(_translate("MainWindow", "PLMN"))
        self.label_39.setText(_translate("MainWindow", "АРМ"))
        self.lineEdit_30.setText(_translate("MainWindow", "opssber.beeline.ru"))
        self.lineEdit_31.setText(_translate("MainWindow", "beeline"))
        self.label_40.setText(_translate("MainWindow", "Название"))
        self.lineEdit_32.setText(_translate("MainWindow", "25099"))
        self.lineEdit_33.setText(_translate("MainWindow", "beeline"))
        self.label_41.setText(_translate("MainWindow", "Имя"))
        self.lineEdit_34.setText(_translate("MainWindow", "BEELINE"))
        self.label_42.setText(_translate("MainWindow", "Пароль"))
        self.pushButton.setText(_translate("MainWindow", "Программировать"))
        self.label_27.setText(_translate("MainWindow", "Перезапись"))
        self.label_33.setText(_translate("MainWindow", "Отчеты"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Полный отчет"))
        self.pushButton_2.setText(_translate("MainWindow", "Сформировать отчет"))
        self.pushButton_3.setText(_translate("MainWindow", "Считать"))
        self.action.setText(_translate("MainWindow", "Полный отчет"))
        self.action123.setText(_translate("MainWindow", "123"))


    def check_ch(self, ch_box, *line_ed):
        if ch_box.isChecked():
            for item in line_ed:
                item.setEnabled(True)
        else:
            for item in line_ed:
                item.setEnabled(False)

    def processing(self):
        self.pushButton.setEnabled(False)
        self.pushButton_2.setEnabled(False)
        self.pushButton_3.setEnabled(False)
        setting_dict = {}
        self.textEdit.setText(validFormat.format(""))
        self.textEdit_2.setText(errorFormat.format(""))
        self.progressBar.setEnabled(True)
        self.progressBar.setValue(0)
        time.sleep(0.1)
        self.textEdit.append(validFormat.format("Авторизация..."))
        self.progressBar.setValue(50)
        time.sleep(0.1)
        # Создаем сессию подключения и авторизуемся на сайте.
        # Создаем сессию для того чтобы при каждом дальнейшем запросе не авторизоваться.
        ses = requests.session()
        user_login = self.lineEdit_3.text()
        user_pass = self.lineEdit_4.text()
        user_data = {"email": user_login, "password": user_pass}
        answer = ses.post("https://keyboard.55-service.ru/login?next=%2F#/objects", json=user_data)
        if answer.status_code != 200:
            self.textEdit_2.append(errorFormat.format("Ошибка связи с сервером"))
            self.progressBar.setValue(100)
            self.progressBar.setEnabled(False)
            self.pushButton.setEnabled(True)
            self.pushButton_2.setEnabled(True)
            self.pushButton_3.setEnabled(True)
            return

        # Полуение времени запроса обновления страницы с объектами. Нужно будет для дальнейшего формирования запроса
        time_request = time.time_ns()
        answer = ses.get("https://keyboard.55-service.ru/#/objects")

        # Откидываем 6 знаков с конца времени запроса, приводим к формату get запроса
        time_start = str(time_request)[:-6]
        answer = ses.get(f"https://keyboard.55-service.ru/objects?tm={time_start}")

        #Проверяем пройденность авторизации исходя из ответа полученного с сайта
        if "Please enter correct email." in answer.text:
            self.textEdit_2.append(errorFormat.format("Авторизация не пройдена"))
            self.progressBar.setValue(100)
            self.progressBar.setEnabled(False)
            self.pushButton.setEnabled(True)
            self.pushButton_2.setEnabled(True)
            self.pushButton_3.setEnabled(True)
            return

        # Сохраняем скачанный перечень объектов в файл json
        with open("s-nord_list_of_object.json", "w", encoding="UTF-8") as file:
            file.write(answer.text)

        # Формируем из файла json словарь для python
        with open("s-nord_list_of_object.json", "r", encoding="UTF-8") as file:
            responce = json.loads(file.read())

        # Загружаем из файла информацию о уже обработанных приборах
        with open(os.path.join("data", "all_devices.json"), "r", encoding="UTF-8") as file:
            setting_dict = json.loads(file.read())

        #Проверяем есть ли список доступных приборов
        if responce["permissions"]:
            self.textEdit.append(validFormat.format(f"Доступно приборов: {len(responce['permissions'])}"))
            self.progressBar.setValue(100)
            time.sleep(0.5)
        else:
            self.textEdit.append(validFormat.format("Список доступных приборов пуст"))
            self.progressBar.setValue(100)
            self.progressBar.setEnabled(False)
            self.pushButton.setEnabled(True)
            self.pushButton_2.setEnabled(True)
            self.pushButton_3.setEnabled(True)
            return

        #Рассчитываем дельту для progressBar
        delta = round(99 / len(responce["permissions"]), 2)
        self.progressBar.setValue(0)
        count = 0
        #Создаем словарь для хранения старых и новых данных для формирования отчета
        change_data = {}
        change_list = []

        # Выделение из словаря адресов конфигурирования приборов и перебор их в for. Перебираем каждый прибор
        for item in range(len(responce["permissions"])):
            time.sleep(0.1)
            count += delta
            part_of_adress = responce["permissions"][item]["config_modes"]["configurator"]

            # Проверяем сконфигурирован ли прибор ранее. Если есть разрешение на перезапись, то проверка не выполняется
            if not self.checkBox_8.isChecked():
                if str(responce['permissions'][item]['object_number']) in setting_dict.keys():
                    if setting_dict[str(responce['permissions'][item]['object_number'])] != "Ошибка загрузки!":
                        self.textEdit.append(validFormat.format(f"Прибор {responce['permissions'][item]['object_number']} уже сконфигурирован"))
                        self.progressBar.setValue(count)
                        continue

            #Сохраняем номер прибора
            change_data["object_number"] = responce['permissions'][item]['object_number']

            #Скачиваем файл конфигурации приборов и Дашборд
            try:
                device_number = responce['permissions'][item]['object_number']
                self.download_setting(part_of_adress, device_number, ses)
            except Exception:
                self.textEdit_2.append(errorFormat.format(f"{device_number} - Ошибка подключения!"))
                setting_dict[device_number] = "Ошибка загрузки!"
                self.progressBar.setValue(count)
                continue

            # Открываем json файл с настройками для замены данных
            with open(os.path.join("data", f"s-nord_{responce['permissions'][item]['object_number']}.json"), "r",
                      encoding="UTF-8") as file:
                setting = json.loads(file.read())


            # Проверяем на наличие возможности подключения внешней антены (для блоков B312)
            try:
                if setting['settings']['misc']['gsm_use_ext_ant'] in [0, 1]:
                    setting['settings']['misc']['gsm_use_ext_ant'] = 1
                    change_data['etx_ant'] = ['Включена поддержка внешней антены', 'Выкл', 'Вкл']
            except Exception:
                pass

            # Меняем данные настроек подключения к центру охраны по GPRS
            if self.checkBox.isChecked():
                change_data["channels_gprs_host_main"] = ["Основной адрес подключения к Центру охраны по GPRS", setting['settings']['channels']['gprs'][0]['host'], self.lineEdit.text()]
                change_data["channels_gprs_port_main"] = ["Основной порт подключения к Центру охраны по GPRS", setting['settings']['channels']['gprs'][0]['port'], self.lineEdit_2.text()]
                setting['settings']['channels']['gprs'][0]['host'] = self.lineEdit.text()
                setting['settings']['channels']['gprs'][0]['port'] = int(self.lineEdit_2.text())

            if self.checkBox_2.isChecked():
                change_data["channels_gprs_host_res"] = ["Резервный адрес подключения к Центру охраны по GPRS", setting['settings']['channels']['gprs'][1]['host'], self.lineEdit_5.text()]
                change_data["channels_gprs_port_res"] = ["Резервный порт подключения к Центру охраны по GPRS", setting['settings']['channels']['gprs'][1]['port'], self.lineEdit_6.text()]
                #change_data["channels_gprs_host_res"] = [1, '2', '3']
                setting['settings']['channels']['gprs'][1]['host'] = self.lineEdit_5.text()
                setting['settings']['channels']['gprs'][1]['port'] = int(self.lineEdit_6.text())

            # Если выбранное устройство банкомат, то меняем настройки Ethernet подключения к ЦО
            if self.checkBox_4.isChecked():
                if int(responce['permissions'][item]['object_number']) > 274999:
                    #Проверяем не заполнен ли ранее эти параметры
                    if setting['settings']['channels']['ethernet'][0]['host'] == "":
                        change_data["channels_eth_host_main"] = ["Основной адрес подключения к Центру охраны по Ethernet", setting['settings']['channels']['ethernet'][0]['host'], self.lineEdit_7.text()]
                        change_data["channels_eth_port_main"] = ["Основной порт подключения к Центру охраны по Ethernet", setting['settings']['channels']['ethernet'][0]['port'], self.lineEdit_10.text()]
                        setting['settings']['channels']['ethernet'][0]['host'] = self.lineEdit_7.text()
                        setting['settings']['channels']['ethernet'][0]['port'] = int(self.lineEdit_10.text())

            if self.checkBox_3.isChecked():
                if int(responce['permissions'][item]['object_number']) > 274999:
                    # Проверяем не заполнен ли ранее эти параметры
                    if setting['settings']['channels']['ethernet'][1]['host'] == "":
                        change_data["channels_eth_host_res"] = ["Резервный адрес подключения к Центру охраны по Ethernet", setting['settings']['channels']['ethernet'][1]['host'], self.lineEdit_8.text()]
                        change_data["channels_eth_port_res"] = ["Резервный порт подключения к Центру охраны по Ethernet", setting['settings']['channels']['ethernet'][1]['port'], self.lineEdit_9.text()]
                        setting['settings']['channels']['ethernet'][1]['host'] = self.lineEdit_8.text()
                        setting['settings']['channels']['ethernet'][1]['port'] = int(self.lineEdit_9.text())

            #Замена параметров подключения к облаку по GPRS
            if self.checkBox_5.isChecked():
                change_data["cloud_gprs_host"] = ["Адрес подключения к Облаку по GPRS", setting['settings']['cloud']['gprs']['host'], self.lineEdit_11.text()]
                change_data["cloud_gprs_port"] = ["Порт подключения к Облаку по GPRS", setting['settings']['cloud']['gprs']['port'], self.lineEdit_12.text()]
                setting['settings']['cloud']['gprs']['host'] = self.lineEdit_11.text()
                setting['settings']['cloud']['gprs']['port'] = int(self.lineEdit_12.text())

            # Замена параметров подключения к облаку по Ethernet
            if self.checkBox_6.isChecked():
                change_data["cloud_eth_host"] = ["Адрес подключения к Облаку по Ethernet", setting['settings']['cloud']['ethernet']['host'], self.lineEdit_13.text()]
                change_data["cloud_eth_port"] = ["Порт подключения к Облаку по Ethernet", setting['settings']['cloud']['ethernet']['port'], self.lineEdit_14.text()]
                setting['settings']['cloud']['ethernet']['host'] = self.lineEdit_13.text()
                setting['settings']['cloud']['ethernet']['port'] = int(self.lineEdit_14.text())

            # Устанавливаем параметры сотовых оператор
            if self.checkBox_7.isChecked():
                change_data["csp"] = ["Настройки сотовых операторов изменены на ЦСМОС", "не ЦСМОС", "ЦСМОС"]
                setting['settings']['csp'][0]['plmn'] = self.lineEdit_16.text()
                setting['settings']['csp'][0]['password'] = self.lineEdit_19.text()
                setting['settings']['csp'][0]['apn'] = self.lineEdit_17.text()
                setting['settings']['csp'][0]['name'] = self.lineEdit_15.text()
                setting['settings']['csp'][0]['user'] = self.lineEdit_18.text()
                setting['settings']['csp'][1]['plmn'] = self.lineEdit_20.text()
                setting['settings']['csp'][1]['password'] = self.lineEdit_24.text()
                setting['settings']['csp'][1]['apn'] = self.lineEdit_22.text()
                setting['settings']['csp'][1]['name'] = self.lineEdit_21.text()
                setting['settings']['csp'][1]['user'] = self.lineEdit_23.text()
                setting['settings']['csp'][2]['plmn'] = self.lineEdit_25.text()
                setting['settings']['csp'][2]['password'] = self.lineEdit_29.text()
                setting['settings']['csp'][2]['apn'] = self.lineEdit_27.text()
                setting['settings']['csp'][2]['name'] = self.lineEdit_26.text()
                setting['settings']['csp'][2]['user'] = self.lineEdit_28.text()
                setting['settings']['csp'][3]['plmn'] = self.lineEdit_32.text()
                setting['settings']['csp'][3]['password'] = self.lineEdit_31.text()
                setting['settings']['csp'][3]['apn'] = self.lineEdit_30.text()
                setting['settings']['csp'][3]['name'] = self.lineEdit_34.text()
                setting['settings']['csp'][3]['user'] = self.lineEdit_33.text()


            with open(os.path.join("data", f"s-nord_{responce['permissions'][item]['object_number']}_new.json"), "w",
                      encoding="UTF-8") as file:
                json.dump(setting, file, indent=4, ensure_ascii=False)

            # Загружаем новые данные в прибор
            try:
                setting_download = ses.post(f"https://keyboard.55-service.ru{part_of_adress}/settings", json=json.loads(
                    open(os.path.join("data", f"s-nord_{responce['permissions'][item]['object_number']}_new.json"), "r",
                         encoding="UTF-8").read()))
            except Exception:
                self.textEdit_2.append(errorFormat.format(f"{responce['permissions'][item]['object_number']} - Ошибка загрузки!"))
                setting_dict[responce['permissions'][item]['object_number']] = "Ошибка загрузки!"
                self.progressBar.setValue(int(count))
                continue
            else:
                self.textEdit.append(validFormat.format(f"Данные в прибор {responce['permissions'][item]['object_number']} загружены!!!"))
                setting_dict[responce['permissions'][item]['object_number']] = datetime.datetime.now().strftime(
                    "%d-%m-%Y %H.%M.%S")
                self.progressBar.setValue(int(count))

                #Добавляем в список словарь данных конкретного прибора
                change_list.append(change_data)
                change_data = {}

        self.progressBar.setValue(99)
        # Записываем в файл информацию о уже обработанных приборах
        with open(os.path.join("data", "all_devices.json"), "w", encoding="UTF-8") as file:
            json.dump(setting_dict, file, indent=4, ensure_ascii=False)

        #Формируем отчет о сессии
        report_name = str(datetime.datetime.now().strftime('%d-%m-%Y %H.%M.%S'))
        with open(os.path.join("reports", f"{report_name}.doc"), "w", encoding="UTF-8") as file:
            for item in range(len(change_list)):
                file.writelines(f"Объект: {change_list[item]['object_number']}\n")
                for key in change_list[item]:
                    if key != "object_number":
                        file.writelines(f"{change_list[item][key][0]}\n")
                        file.writelines(f"Было: {change_list[item][key][1]}   ->  Стало: {change_list[item][key][2]}\n\n")
                file.writelines(f"----------------------------------------------------------\n\n")
        self.textEdit.append(validFormat.format(f"\nСформирован отчет: '{report_name}.doc'"))
        self.progressBar.setValue(100)
        self.progressBar.setEnabled(False)
        self.pushButton.setEnabled(True)
        self.pushButton_2.setEnabled(True)
        self.pushButton_3.setEnabled(True)

        # Отправка данных на прибор
        # ses.post(https://keyboard.55-service.ru/configurator/276056/5/7/20/8/settings, json=)

    def full_report(self):
        self.textEdit.setText(validFormat.format(""))
        self.textEdit_2.setText(errorFormat.format(""))
        self.textEdit.append(validFormat.format(f"Формируется полный отчет"))
        self.progressBar.setEnabled(True)

        data = {}

        #Открываем файл с уже запрограммированными приборами
        with open(os.path.join("data", "all_devices.json"), "r", encoding="UTF-8") as file:
            setting_dict = json.loads(file.read())

        #Данные для трекбара
        delta = round(99 / len(setting_dict), 2)
        self.progressBar.setValue(0)
        count = 0

        for number_device, status in setting_dict.items():
            # if status == "Ошибка загрузки!":
            #     continue
            try:
                with open(os.path.join("data", f"s-nord_{number_device}_new.json"), "r", encoding="UTF-8") as file:
                    setting = json.loads(file.read())
            except Exception:
                continue

            #Формируем переменные для дальнейшего словаря
            sc_gprs_host_1 = setting['settings']['channels']['gprs'][0]['host']
            sc_gprs_port_1 = setting['settings']['channels']['gprs'][0]['port']
            sc_gprs_host_2 = setting['settings']['channels']['gprs'][1]['host']
            sc_gprs_port_2 = setting['settings']['channels']['gprs'][1]['port']
            sc_eth_host_1 = setting['settings']['channels']['ethernet'][0]['host']
            sc_eth_port_1 = setting['settings']['channels']['ethernet'][0]['port']
            sc_eth_host_2 = setting['settings']['channels']['ethernet'][1]['host']
            sc_eth_port_2 = setting['settings']['channels']['ethernet'][1]['port']
            cl_gprs_host_1 = setting['settings']['cloud']['gprs']['host']
            cl_gprs_port_1 = setting['settings']['cloud']['gprs']['port']
            cl_eth_host_1 = setting['settings']['cloud']['ethernet']['host']
            cl_eth_port_1 = setting['settings']['cloud']['ethernet']['port']

            #Проверка на ЦСМОС (если есть хоть одна подходящая точка доступа)
            csmos = "Нет"
            for i in range(4):
                if setting['settings']['csp'][i]['apn'] in ["ops-sber.megafon.ru", "opssber.msk", "sec.ops.sberbank", "opssber.beeline.ru"]:
                    csmos = "Да"

            #Проверка на внешнюю антенну
            ext_ant = "Нет данных"
            try:
                if setting['settings']['misc']['gsm_use_ext_ant'] == 0:
                    ext_ant = "Нет"
                else:
                    ext_ant = "Да"
            except Exception:
                pass

            #Получение MAC адреса
            ip_addr = "Нет LAN модуля"
            mac = "Нет MAC адреса"
            try:
                if setting['settings']['ethernet']['ip_addr'] != "0.0.0.0":
                    ip_addr = setting['settings']['ethernet']['ip_addr']
                    mac_list = setting['settings']['ethernet']['mac']
                    mac = " : ".join([hex(i) for i in mac_list])
            except Exception:
                pass

            #Попытка открыть файл конфигурации с Дашбордом
            plmn1 = ""
            plmn2 = ""
            try:
                with open(os.path.join("data", "dashboard", f"s-nord_{number_device}_dashboard.json"), "r", encoding="UTF-8") as file:
                    setting_dashboards = json.loads(file.read())
                    plmn1 = setting_dashboards["sim1"]["plmn"]
                    plmn2 = setting_dashboards["sim2"]["plmn"]
            except Exception:
                pass

            if plmn1 is None:
                plmn1 = ""
            if plmn2 is None:
                plmn2 = ""

            operator_sim1 = "Нет данных"
            sim1 = "Нет данных"
            operator_sim2 = "Нет данных"
            sim2 = "Нет данных"

            if (len(plmn1) > 11):
                operator_sim1 = plmn1[:5]
                sim1 = plmn1[5:]
            if (len(plmn2) > 11):
                operator_sim2 = plmn2[:5]
                sim2 = plmn2[5:]

            #Формирование словаря данных по конкретному прибору
            data[number_device] = {
                "sc_gprs_host_1": sc_gprs_host_1,
                "sc_gprs_port_1": sc_gprs_port_1,
                "sc_gprs_host_2": sc_gprs_host_2,
                "sc_gprs_port_2": sc_gprs_port_2,
                "sc_eth_host_1": sc_eth_host_1,
                "sc_eth_port_1": sc_eth_port_1,
                "sc_eth_host_2": sc_eth_host_2,
                "sc_eth_port_2": sc_eth_port_2,
                "cl_gprs_host_1": cl_gprs_host_1,
                "cl_gprs_port_1": cl_gprs_port_1,
                "cl_eth_host_1": cl_eth_host_1,
                "cl_eth_port_1": cl_eth_port_1,
                "csmos": csmos,
                "ext_ant": ext_ant,
                "ip_addr": ip_addr,
                "mac": mac,
                "operator_sim1": operator_sim1,
                "sim1": sim1,
                "operator_sim2": operator_sim2,
                "sim2": sim2
            }
            count += delta
            self.progressBar.setValue(int(count))



        self.create_excel_report(data)
        self.progressBar.setValue(100)
        self.progressBar.setEnabled(False)

    def create_excel_report(self, data):

        book = openpyxl.Workbook()
        sheet = book.active


        sheet['B2'].value = "Номер объекта"
        sheet['C2'].value = "IP-адрес №1(GPRS) подключения к центру охраны"
        sheet['D2'].value = "Порт №1(GPRS) подключения к центру охраны"
        sheet['E2'].value = "IP-адрес №2(GPRS) подключения к центру охраны"
        sheet['F2'].value = "Порт №2(GPRS) подключения к центру охраны"
        sheet['G2'].value = "IP-адрес №1(Ethernet) подключения к центру охраны"
        sheet['H2'].value = "Порт №1(Ethernet) подключения к центру охраны"
        sheet['I2'].value = "IP-адрес №2(Ethernet) подключения к центру охраны"
        sheet['J2'].value = "Порт №2(Ethernet) подключения к центру охраны"
        sheet['K2'].value = "IP-адрес (GPRS) подключения к облаку"
        sheet['L2'].value = "Порт (GPRS) подключения к облаку"
        sheet['M2'].value = "IP-адрес (Ethernet) подключения к облаку"
        sheet['N2'].value = "Порт (Ethernet) подключения к облаку"
        sheet['O2'].value = "ЦСМОС"
        sheet['P2'].value = "Разрешение подключения внешней антенны"
        sheet['Q2'].value = "IP-адрес LAN-модуля"
        sheet['R2'].value = "MAC-адресс LAN-модуля"
        sheet['S2'].value = "Оператор sim1"
        sheet['T2'].value = "ICCD sim1"
        sheet['U2'].value = "Оператор sim2"
        sheet['V2'].value = "ICCD sim2"

        i = 3
        for key in data.keys():
            sheet['B' + str(i)].value = key
            sheet['C' + str(i)].value = data[key]["sc_gprs_host_1"]
            sheet['D' + str(i)].value = data[key]["sc_gprs_port_1"]
            sheet['E' + str(i)].value = data[key]["sc_gprs_host_2"]
            sheet['F' + str(i)].value = data[key]["sc_gprs_port_2"]
            sheet['G' + str(i)].value = data[key]["sc_eth_host_1"]
            sheet['H' + str(i)].value = data[key]["sc_eth_port_1"]
            sheet['I' + str(i)].value = data[key]["sc_eth_host_2"]
            sheet['J' + str(i)].value = data[key]["sc_eth_port_2"]
            sheet['K' + str(i)].value = data[key]["cl_gprs_host_1"]
            sheet['L' + str(i)].value = data[key]["cl_gprs_port_1"]
            sheet['M' + str(i)].value = data[key]["cl_eth_host_1"]
            sheet['N' + str(i)].value = data[key]["cl_eth_port_1"]
            sheet['O' + str(i)].value = data[key]["csmos"]
            sheet['P' + str(i)].value = data[key]["ext_ant"]
            sheet['Q' + str(i)].value = data[key]["ip_addr"]
            sheet['R' + str(i)].value = data[key]["mac"]
            sheet['S' + str(i)].value = data[key]["operator_sim1"]
            sheet['T' + str(i)].value = data[key]["sim1"]
            sheet['U' + str(i)].value = data[key]["operator_sim2"]
            sheet['V' + str(i)].value = data[key]["sim2"]
            i += 1

        report_name = str(datetime.datetime.now().strftime('%d-%m-%Y %H.%M'))
        book.save(os.path.join("reports", "excel_reports", f"{report_name}.xlsx"))
        book.close()
        self.textEdit.append(validFormat.format(f"Сформирован отчет: {report_name}.xlsx"))



    def download_setting(self, part_of_adress, device_number, ses, prefix=''):
        # Подключение к настройкам прибора
        time_request = time.time_ns()
        time_1 = str(time_request)[:-6]

        answer_setting = ses.get(f"https://keyboard.55-service.ru{part_of_adress}/settings?tm={time_1}")

        time_request = time.time_ns()
        time_2 = str(time_request)[:-6]

        answer_dashboard = ses.get(f"https://keyboard.55-service.ru{part_of_adress}/dashboard/?tm={time_2}")


        # Создаем отдельный файл с настройками для каждого прибора
        with open(os.path.join("data", f"s-nord_{device_number}{prefix}.json"), "w",
                  encoding="UTF-8") as file:
            file.write(answer_setting.text)

        # Создаем отдельный файл с настройками Дашборда для каждого прибора
        with open(os.path.join("data", "dashboard", f"s-nord_{device_number}_dashboard.json"), "w",
                  encoding="UTF-8") as file:
            file.write(answer_dashboard.text)


    def read_config(self):
        self.pushButton.setEnabled(False)
        self.pushButton_2.setEnabled(False)
        self.pushButton_3.setEnabled(False)
        self.textEdit.setText(validFormat.format(""))
        self.textEdit_2.setText(errorFormat.format(""))
        self.progressBar.setEnabled(True)
        self.progressBar.setValue(0)
        time.sleep(0.1)
        self.textEdit.append(validFormat.format("Авторизация..."))
        self.progressBar.setValue(50)
        time.sleep(0.1)
        # Создаем сессию подключения и авторизуемся на сайте.
        # Создаем сессию для того чтобы при каждом дальнейшем запросе не авторизоваться.
        ses = requests.session()
        user_login = self.lineEdit_3.text()
        user_pass = self.lineEdit_4.text()
        user_data = {"email": user_login, "password": user_pass}
        answer = ses.post("https://keyboard.55-service.ru/login?next=%2F#/objects", json=user_data)
        if answer.status_code != 200:
            self.textEdit_2.append(errorFormat.format("Ошибка связи с сервером"))
            self.progressBar.setValue(100)
            self.progressBar.setEnabled(False)
            self.pushButton.setEnabled(True)
            self.pushButton_2.setEnabled(True)
            self.pushButton_3.setEnabled(True)
            return

        # Полуение времени запроса обновления страницы с объектами. Нужно будет для дальнейшего формирования запроса
        time_request = time.time_ns()
        answer = ses.get("https://keyboard.55-service.ru/#/objects")

        # Откидываем 6 знаков с конца времени запроса, приводим к формату get запроса
        time_start = str(time_request)[:-6]
        answer = ses.get(f"https://keyboard.55-service.ru/objects?tm={time_start}")

        # Проверяем пройденность авторизации исходя из ответа полученного с сайта
        if "Please enter correct email." in answer.text:
            self.textEdit_2.append(errorFormat.format("Авторизация не пройдена"))
            self.progressBar.setValue(100)
            self.progressBar.setEnabled(False)
            self.pushButton.setEnabled(True)
            self.pushButton_2.setEnabled(True)
            self.pushButton_3.setEnabled(True)
            return

        # Сохраняем скачанный перечень объектов в файл json
        with open("s-nord_list_of_object.json", "w", encoding="UTF-8") as file:
            file.write(answer.text)

        # Формируем из файла json словарь для python
        with open("s-nord_list_of_object.json", "r", encoding="UTF-8") as file:
            responce = json.loads(file.read())

        # Проверяем есть ли список доступных приборов
        if responce["permissions"]:
            self.textEdit.append(validFormat.format(f"Доступно приборов: {len(responce['permissions'])}"))
            self.progressBar.setValue(100)
            time.sleep(0.5)
        else:
            self.textEdit.append(validFormat.format("Список доступных приборов пуст"))
            self.progressBar.setValue(100)
            self.progressBar.setEnabled(False)
            self.pushButton.setEnabled(True)
            self.pushButton_2.setEnabled(True)
            self.pushButton_3.setEnabled(True)
            return

        # Рассчитываем дельту для progressBar
        delta = round(99 / len(responce["permissions"]), 2)
        self.progressBar.setValue(0)
        count = 0
        prefix = "_new"

        #Открываем файл со всеми приборами для добавления приборов после скачивания
        with open(os.path.join("data", "all_devices.json"), "r", encoding="UTF-8") as file:
            all_devices_dict = json.loads(file.read())

        # Выделение из словаря адресов конфигурирования приборов и перебор их в for. Перебираем каждый прибор
        for item in range(len(responce["permissions"])):
            time.sleep(0.1)
            count += delta
            part_of_adress = responce["permissions"][item]["config_modes"]["configurator"]

            # Скачиваем файл конфигурации приборов и Дашборд
            try:
                device_number = responce['permissions'][item]['object_number']

                self.download_setting(part_of_adress, device_number, ses, prefix)

                self.textEdit.append(validFormat.format(f"{device_number} - Конфигурации считаны!"))
                self.progressBar.setValue(count)

                all_devices_dict[device_number] = datetime.datetime.now().strftime("%d-%m-%Y %H.%M.%S")

            except Exception:
                self.textEdit_2.append(errorFormat.format(f"{device_number} - Ошибка подключения!"))
                self.progressBar.setValue(count)
                continue
            self.progressBar.setValue(int(count))


        # Записываем в файл информацию о уже обработанных приборах
        with open(os.path.join("data", "all_devices.json"), "w", encoding="UTF-8") as file:
            json.dump(all_devices_dict, file, indent=4, ensure_ascii=False)

        self.progressBar.setValue(100)
        self.progressBar.setEnabled(False)
        self.pushButton.setEnabled(True)
        self.pushButton_2.setEnabled(True)
        self.pushButton_3.setEnabled(True)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    errorFormat = '<span style="color:red;">{}</span>'
    warningFormat = '<span style="color:orange;">{}</span>'
    validFormat = '<span style="color:green;">{}</span>'
    MainWindow.show()
    sys.exit(app.exec_())
